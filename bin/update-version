#!/bin/bash
set -e

# Check if the git repository is clean
if ! git diff-index --quiet HEAD --; then
    echo "The git repository is not clean. Please commit or stash your changes."
    exit 1
fi

# Check if the current branch is main
if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ]; then
    echo "The current branch is not main. Please switch to the main branch."
    exit 1
fi

# Check if the git repository is up to date
if ! git fetch --quiet && git rev-parse HEAD == git rev-parse @{u}; then
    echo "The git repository is not up to date. Please pull the latest changes."
    exit 1
fi

# Check if the specifier is passed as an argument
if [ -z "$1" ]; then
    echo "Please pass the new version as an argument."
    exit 1
fi

SPECIFIER=$1
CURRENT_VERSION=$(node -p "require('./package.json').version")
BRANCH_NAME="release/$CURRENT_VERSION"

# Check if the specifier is one of major/minor/patch
if [ "$SPECIFIER" != "major" ] && [ "$SPECIFIER" != "minor" ] && [ "$SPECIFIER" != "patch" ]; then
    echo "The specifier must be one of major/minor/patch."
    exit 1
fi

# Delete the release branch if it exists
if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
    git branch -D "$BRANCH_NAME"
fi

# Create a new release branch
git checkout -b "$BRANCH_NAME"

# Update the version
npm version "$SPECIFIER"

# Push the release branch and tags
git push --set-upstream origin "$BRANCH_NAME" --tags

# Create a pull request
gh pr create --title "Release $CURRENT_VERSION" --body "Release $CURRENT_VERSION" --base main --head "$BRANCH_NAME"
gh pr merge --rebase --delete-branch --auto

# TODO: Fix tagging

# Checkout the main branch
git checkout main
